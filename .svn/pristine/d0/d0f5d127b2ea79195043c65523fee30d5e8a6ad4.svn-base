package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;
import model.MovableTetrisPiece;
import model.Point;
import model.TetrisPiece;

public class GamePanel extends JPanel implements Observer {

    /**
     * 
     */
    private static final long serialVersionUID = -4329581241840629446L;

    private static final int BLOCK_SIZE = 35;
    
    private static final int DEFAULT_WIDTH = 10;
    
    private static final int DEFAULT_HEIGHT = 20;
 
    private Board myBoard;
        
    private String myBoardGraphic;
    
    public GamePanel(final Board theBoard) {
        myBoard = theBoard;
        setOpaque(true);
        setPreferredSize(new Dimension(DEFAULT_WIDTH * BLOCK_SIZE,
                              DEFAULT_HEIGHT * BLOCK_SIZE));
        setBackground(Color.WHITE);
        setFocusable(true);
        myBoard.addObserver(this);
        addKeyListener(new KeyBoardListener());
        Timer myTimer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent theEvent) {
                myBoard.step();
            }
        });
        myTimer.start();
        }
    
    @Override
    public void update(final Observable theObservable, final Object theObject) {
        if (theObject instanceof String) {
            myBoardGraphic = (String) theObject;
            repaint();
            }
        else if (theObject instanceof Boolean) {
            boolean gameOver = (boolean) theObject;
            if (gameOver) {
                JOptionPane.showMessageDialog(null, "Game Over!", "Game Over!",
                                              JOptionPane.OK_OPTION);
            }
        }
            
        }
    
           
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2 = (Graphics2D) theGraphics;
        String[] thisBoard = myBoardGraphic.split("\n");
        g2.setColor(Color.BLACK);
        g2.drawRect(1 * BLOCK_SIZE, 0, DEFAULT_WIDTH * BLOCK_SIZE,
                    DEFAULT_HEIGHT * BLOCK_SIZE);
        for (int i = 0; i < thisBoard.length; i++) {
            for (int j = 1; j < DEFAULT_WIDTH + 1; j++) {
                if (Character.isLetter(thisBoard[i].charAt(j)) ||
                                Character.isDigit(thisBoard[i].charAt(j))) {
                    g2.setColor(Color.WHITE);
                    g2.fillRect(j * BLOCK_SIZE, (i - 5) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                    g2.setColor(Color.BLACK);
                    g2.drawRect(j * BLOCK_SIZE, (i - 5) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                }
            }
        }
    }

    
    
    class KeyBoardListener extends KeyAdapter {
        
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            final int key = theEvent.getKeyCode();
            switch (key) {
                case KeyEvent.VK_LEFT:
                    myBoard.left();
                    break;
                case KeyEvent.VK_PAGE_DOWN:
                    myBoard.rotateCCW();
                    break;
                case KeyEvent.VK_RIGHT:
                    myBoard.right();
                    break;
                case KeyEvent.VK_DOWN:
                    myBoard.down();
                    break;
                case KeyEvent.VK_SPACE:
                    myBoard.drop();
                    break;
                case KeyEvent.VK_PAGE_UP:
                    myBoard.rotateCW();
                    break;
                default:
                    break;
            }
        }
    }
}